package application;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Scanner;

import database.SerializeDB;
import entity.*;

import java.io.*;
import java.text.SimpleDateFormat;

public class Moblima {

	private static Scanner sc = new Scanner(System.in);
	private static List list;
	// private static Person person;

	public static void main(String[] args) {

		int choice;
		do {

			System.out.println("=====================================");
			System.out.println("|1. List Movies                     |");
			System.out.println("|2. Search Movie                    |");
			System.out.println("|3. Top 5 Ranking                   |");
			System.out.println("|4. Booking and Purchasing Tickets  |");
			System.out.println("|5. Staff Login                     |");
			System.out.println("=====================================");

			System.out.print("Enter your choice: ");
			choice = sc.nextInt();
			sc.nextLine();

			switch (choice) {
			case 1: // list all movies
				showAllMovie();
				break;

			case 2: // search for movies
				searchMovie();
				break;

			case 3: // top 5 ranking
				showTopRank();
				break;

			case 4: // booking and purchasing tickets
				do {
					System.out.println("1. Start a new booking");
					System.out.println("2. View past booking");
					System.out.println("3. Back to main menu");
					System.out.print("Enter your choice: ");
					choice = sc.nextInt();
					sc.nextLine();

					switch (choice) {
					case 1:
						bookTicket();
						break;
					case 2:
						pastBooking();
						break;
					case 3:
						break;
					default:
						System.out.print("No such choice. Re-enter your choice");
						break;
					}
				} while (choice != 3);
				break;

			case 5: // staff login
				staffLogin();
				break;

			default: // need to improve here
				System.out.println("Re-enter your choice!");
				System.out.print("Enter your choice: ");
				choice = sc.nextInt();
			}
		} while (choice <= 5 && choice > 0); // end of do-while loop
	}

	private static void staffLogin() {
		Staff staff = new Staff();
		if (!staff.login())
			System.out.println("Incorrect ID or Password");
		else
			staff.showStaffMenu();
	}

	public static ArrayList<Movie> findMovies(String movieName) {
		// empty array list for movie
		ArrayList<Movie> movieList = new ArrayList<>();

		// pull from database and add to movieList
		list = (ArrayList<Movie>) SerializeDB.readSerializedObject("Movie.ser");
		for (int i = 0; i < list.size(); i++) {
			Movie mv = (Movie) list.get(i);
			if (mv.getTitle().toLowerCase().contains(movieName.toLowerCase())) {
				// if search name is in movile title add to list
				movieList.add(mv);
			}
		}
		return movieList;
	}

	// get all the Movies as Arraylist
	public static ArrayList<Movie> getAllMovies() {
		return (ArrayList<Movie>) SerializeDB.readSerializedObject("Movie.ser");
	}

	// get top 5 sort by review or no_of_ticket_sold
	public ArrayList<Movie> getTopFive(String rankBy) {
		// temp movie to hold during sort
		Movie temp_movie;
		list = (ArrayList<Movie>) SerializeDB.readSerializedObject("Movie.ser");
		// change to normal list to do the sort
		Movie[] MovieList = new Movie[list.size()];
		MovieList = (Movie[]) list.toArray(MovieList);
		if (rankBy == "review") {
			// do insertion sort
			for (int i = 0; i < MovieList.length - 1; i++) {
				for (int d = i; d >= 0; d--) {
					if (MovieList[i].getOverallUserRating() > MovieList[i + 1].getOverallUserRating()) {
						temp_movie = MovieList[i];
						MovieList[i] = MovieList[i + 1];
						MovieList[i + 1] = temp_movie;
					} else {
						break;
					}
				}
			}
		} else {
			// do insertion sort
			for (int i = 0; i < MovieList.length - 1; i++) {
				for (int d = i; d >= 0; d--) {
					if (MovieList[i].getTicketSold() > MovieList[i + 1].getTicketSold()) {
						temp_movie = MovieList[i];
						MovieList[i] = MovieList[i + 1];
						MovieList[i + 1] = temp_movie;
					} else {
						break;
					}
				}
			}
		}
		// return only top 5
		ArrayList<Movie> top5List = new ArrayList<>();
		for (int i = 0; i < MovieList.length; i++) {
			if (i < 5) {
				top5List.add(MovieList[i]);
			} else {
				break;
			}
		}
		return top5List;
	}
	/*list = (ArrayList<Cinema>) SerializeDB.readSerializedObject("Cinema.ser");
			for (int i = 0; i < list.size(); i++) {
				Cinema cnma = (Cinema) list.get(i);
				Ticket[] tckt = new Ticket[cnma.getSeat().length];
				for (int s = 0; s < cnma.getSeat().length; s++) {

					// movie type and getting system setting here
					// if newMovie.getType() == "something" price = something
					float price = 0.0f;
					// if holiday add
					price += 2.0;
					if (s == 10 || s == 11 || s == 12) {
						tckt[s] = new Ticket(s, cnma.getSeat()[s], price, Ticket.SOLD);
					} else {
						tckt[s] = new Ticket(s, cnma.getSeat()[s], price, Ticket.AVAILABLE);
					}

				}
				ShowTime st = new ShowTime(0, cnma, new Date(), tckt);
				showtimeList.add(st);
				break;
			}*/
	private static int getAvailSeatNum(ShowTime st)
	{
		int count=0;
		Ticket[] ticketArr= st.getTickets();
		for (int i =0; i<ticketArr.length;i++)
		{
			if(ticketArr[i].getStatus() == Ticket.AVAILABLE)
			{
				count++;
			}
		}
		return count;
	}
	
	private static void printingSeatLayout()
	{
		/*Ticket[] tckt = new Ticket[cnma.getSeat().length];
		for (int s = 0; s < cnma.getSeat().length; s++) {

			// movie type and getting system setting here
			// if newMovie.getType() == "something" price = something
			float price = 0.0f;
			// if holiday add
			price += 2.0;
			if (s == 10 || s == 11 || s == 12) {
				tckt[s] = new Ticket(s, cnma.getSeat()[s], price, Ticket.SOLD);
			} else {
				tckt[s] = new Ticket(s, cnma.getSeat()[s], price, Ticket.AVAILABLE);
			}

		}*/
	}

	private static void bookTicket() {
		// display all now showing movies
		System.out.println("Now showing movies:");
		getAllMovies();

		ArrayList<Movie> movieList = new ArrayList<>();
		do {
			System.out.print("Enter movie title to book: ");
			String movieTitle = sc.nextLine();
			sc.nextLine();
			movieList = findMovies(movieTitle);
			if(movieList.size() == 0)
				System.out.println("No movie found");
		} while (movieList.size() == 0);

		// print out showtime for each movie
		for (int i = 0; i < movieList.size(); i++) {
			Movie movie = (Movie) movieList.get(i);
			if (movie.getStatus() == "Now showing") {
				System.out.printf("Showtime for %s\n", movie.getTitle());
				System.out.printf("DateTime\t\t\tCinema\t\t\tAvailable Seats");
				List<ShowTime> stList = movie.getShowTimes();
				for (int j = 0; j < stList.size(); j++) {
					ShowTime st = stList.get(j);
					System.out.print(st.getShowDateTime());
					System.out.printf("%15s %d%n", st.getCinema().getCinemaId(), (st.getCinema()).getAvailSeatNum());
					if (getAvailSeatNum(st) > 0) {
						System.out.println("--------Seat layout--------");
						
						System.out.println("---------------------------");
					}
				}
				System.out.print("Enter the cineplex name: ");
				String cineplexName = sc.nextLine();
				sc.nextLine();
				System.out.print("Enter the cinema code: ");
				String cinemaCode = sc.nextLine();
				sc.nextLine();
				System.out.print("Enter row number of seat you want to book: ");
				int row = sc.nextInt();
				sc.nextLine();
				if (row != -1) {
					System.out.print("Column number: ");
					int col = sc.nextInt();
					sc.nextLine();
					Seat tmpSeat = new Seat(row, col, true);
					System.out.println("Choose your ticket type (1. Child | 2. Adult | 3. Senior Citizen");
					int tchoice = sc.nextInt();
					String type;
					switch (tchoice) {
					case 1:
						type = "Child";
						break;
					case 2:
						type = "Adult";
						break;
					case 3:
						type = "Senior Citizen";
						break;
					default:
						type = "Adult";
					}

					// get the ticket and seat with selected details
					for (int index = 0; index < stList.size(); index++) {
						ShowTime st = stList.get(index);
						if (st.getCinema().getCinemaCode() == cinemaCode
								&& (st.getCinema().getSeatLayout().getSeat(row, col)).equals(tmpSeat)) {
							// set the status of selected seat to unavailable
							stList.get(index).getCinema().getSeatLayout().getSeat(row, col).setStatus(false);

							// get ticket's details
							ArrayList<Ticket> ticketList = (ArrayList<Ticket>) SerializeDB
									.readSerializedObject("Ticket.ser");

							for (int j = 0; j < ticketList.size(); j++) {
								if ((ticketList.get(j).getSeat()).equals(tmpSeat)
										&& ticketList.get(j).getTicketType() == type) {
									// check if the selected date is holiday/weekend/discount day

								}
							}
							break;
						} // end if
					}
				}
				break;
			} // end if (movie.getMovieId() == movieID)
		} // end for loop checking for movie

	}

	private static void pastBooking() {

	}

	private void createTXN() {

	}
}
